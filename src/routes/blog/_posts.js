
        const posts = [{"title":"Detecting unique arrays in Javascript","slug":"Detecting-unique-arrays-in-Javascript","publishedAt":"24 Dec 2019","keywords":"javascript,algorithms,arrays,performance","excerpt":"When Javascript arrays contain primitive values (strings, numbers, undefined, null, booleans and Symbols), there might be cases in which you&#39;re willing to detect if the array contains any duplicated elements. in other words, you would want to determine if elements in the array are unique.","html":"<!DOCTYPE html><html><p>When Javascript arrays contain primitive values (strings, numbers, undefined, null, booleans and Symbols), there might be cases in which you&#39;re willing to detect if the array contains any duplicated elements. in other words, you would want to determine if elements in the array are unique.</p>\n<p>There are several approaches you can take to achieve this. let&#39;s take a closer look at our options.</p>\n<h2>Approach 1: Nested loops</h2>\n<p>In this approach, we will traverse the array, starting from the first element and for each element, we will compare this element to all the other elements to see if there is a match. to achieve this, we will use two <code>for loops</code>, nested into each other.</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isUnique</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// if the elements match, this wouldn&#39;t be a unique array</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!==</span> j <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Although this approach works quite fine with small and semi-small datasets, as the input dataset grows, it gets slower and slower. The slowness of this approach is because of the nested loop. Imagine a dataset of a million numbers. in this dataset, in the worst case, our duplicated element could be the last element in the array and therefore, we would need to compare a million numbers to a million numbers (1 million * 1 million), which is quite slow.</p>\n<p><a data-external=\"true\" rel=\"nofollow noreferrer noopener\" target=\"_blank\" href=\"undefined\"></a></p>\n<iframe loading=\"lazy\" frameborder=\"0\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" src=\"//jsfiddle.net/farskid/bquo7k8x/9/embedded/js/dark/\" height=\"300\" width=\"100%\"></iframe>\n<h2>Approach 2: Single loop with cached values</h2>\n<p>In this approach, instead of comparing each element to every other element, we will keep track of the elements we visit and weren&#39;t a match for a duplicated element. in other words, we cache what we traverse and just look them up for the next element to check if we&#39;ve already visited such an element. Because of this visited reference, we only need to compare every element in the array to this reference and therefore, we have to traverse this array only once.</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isUnique</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> seenValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// we already saw this element in the array</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>seenValues<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      seenValues<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>in the worst case of a million numbers in a dataset, our duplicated element will be the last element but in this approach, we only compare 1 million times. This approach is significantly faster than approach 1. see the benchmark at the end of article.</p>\n<p><a data-external=\"true\" rel=\"nofollow noreferrer noopener\" target=\"_blank\" href=\"undefined\"></a></p>\n<iframe loading=\"lazy\" frameborder=\"0\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" src=\"//jsfiddle.net/farskid/zky1mdug/15/embedded/js/dark/\" height=\"300\" width=\"100%\"></iframe>\n<h2>Approach 3: using ES6 <code>set</code></h2>\n<p>When ES6 came around, we were introduced to a new data structure in Javascript called <code>Set</code>s. Sets are collection of elements that are unique by definition, meaning that if you try to insert a duplicated element into a set, it won&#39;t have any effects.</p>\n<p>Due to <code>Set</code>s being a collection of unique elements by definition, there is a technique to convert arrays into sets which in turn, results in a unique collection of items in that array, now stored into the set. then a reverse operation will be used to convert that <code>Set</code> back to an array.</p>\n<p>In a sense, you could say, <code>Set</code> is used as an intermediate data structure to remove duplicated elements from the array.</p>\n<p><code>Array -&gt; Set -&gt; Array</code></p>\n<pre><code class=\"language-javascript\"><span class=\"token comment\">// convert an array to a set and convert back</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getUniqueArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isUnique</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getUniqueArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>in this approach, if the number of elements inside the unique array (converted back from Set) is the same as the input array length, it means this array has already been containing unique values and no duplicated values were removed from it to alter the length.</p>\n<blockquote>\n<p>Note: You don&#39;t need to convert a <code>Set</code> back to array if you just want to check for uniqueness. You can skip this part of operation totally by checking <code>Set.prototype.size</code>.</p>\n</blockquote>\n<pre><code class=\"language-javascript\"><span class=\"token comment\">// convert an array to a set</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">arrayToSet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isUnique</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">arrayToSet</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">===</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>Performance comparison</h2>\n<p>Using any of these 3 approaches interchangeably is fine as long as your dataset is relatively small. for larger datasets, you need to keep an eye on performance of these approaches and how many operations they could execute in a limited duration.</p>\n<p>The short answer for performance comparison between these 3 is:</p>\n<p><code>Approach 2 &gt; Approach 3 &gt; Approach 1</code>.</p>\n<p>Approach 2 (using single loop with cached values) is significantly faster than the rest. between approach 3 (Set) and approach 1 (Nested loops), approach 3 is also much faster.</p>\n<p>To have a better understanding of these performance comparisons, take a look at this benchmark:</p>\n<p><a data-external=\"true\" rel=\"nofollow noreferrer noopener\" target=\"_blank\" href=\"undefined\"></a></p>\n<h3>Side note for whoever is curious</h3>\n<p>Approach 1 (using nested loops) is of quadratic complexity, meaning that it will result in O(n^2) Time complexity.</p>\n<p>Approach 2 (using single loop and cached values) is of linear complexity, meaning that it will result in O(n) Time complexity.</p>\n<p>For approach 3, I won&#39;t have a strong opinion as I&#39;m not fully aware of how <code>Set</code>s are being implemented in Javascript engines under the hood.</p>\n<h2>Conclusion for the impatient</h2>\n<p>Do not pre-optimize for a problem you don&#39;t have. Performance optimizations make sense only when you have a large dataset to bring slowness onto surface. for relatively small datasets, it won&#39;t matter which approach you take as all will behave fast enough. for larger datasets, always lean towards using approach 2 as benchmarks show it&#39;s significantly faster.</p>\n<p><img alt=\"Benchmarks\" src=\"https://thepracticaldev.s3.amazonaws.com/i/mawv2bokl4z4cny271b5.png\" loading=\"lazy\"></p>\n</html>","nextSlug":"Unit-Testing-Higher-Order-Components-with-Enzyme-and-Jest","prevSlug":"Cross-Domain-Iframe-parent-communication"},{"title":"useBackButton hook to handle back button behavior in React Native","slug":"useBackButton-hook-to-handle-back-button-behavior-in-React-Native","publishedAt":"12 Aug 2019","keywords":"React,React-Native,React-hooks,custom-hooks","excerpt":"<a data-external=\"true\" rel=\"nofollow noreferrer noopener\" target=\"_blank\" href=\"undefined\">React hooks</a> help with carrying stateful logic and keeping their lifecycle separate from the view layer lifecycle. They&#39;ve been around since React v16.8 and since people have been avoiding class components in favor of hooks.","html":"<!DOCTYPE html><html><p><a data-external=\"true\" rel=\"nofollow noreferrer noopener\" target=\"_blank\" href=\"undefined\">React hooks</a> help with carrying stateful logic and keeping their lifecycle separate from the view layer lifecycle. They&#39;ve been around since React v16.8 and since people have been avoiding class components in favor of hooks.</p>\n<p>One of the somewhat interesting aspects of hooks is their flexibility in terms of composition and abstraction. If a code snippet using different <a data-external=\"true\" rel=\"nofollow noreferrer noopener\" target=\"_blank\" href=\"undefined\">built-in hooks</a> is handling a part of logic that is separate and independent from other parts, it can be abstracted away as a <a data-external=\"true\" rel=\"nofollow noreferrer noopener\" target=\"_blank\" href=\"undefined\"><strong>Custom Hook</strong></a>.</p>\n<h2>useBackButton custom hook</h2>\n<p>To handle the behavior of hardware back button in Android and tvOS devices using React Native, there is <a data-external=\"true\" rel=\"nofollow noreferrer noopener\" target=\"_blank\" href=\"undefined\"><em>BackHandler</em></a> API that can assist in overriding the default behavior or patching it.</p>\n<p><code>BackHandler</code> takes an event-driven approach to offer an API, meaning that to subscribe to back button presses, you&#39;ll need to register an event listener.</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BackHandler <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;react-native&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">backButtonHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nBackHandler<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;hardwareBackPress&quot;</span><span class=\"token punctuation\">,</span> backButtonHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>and of course, to de-register this subscription, you&#39;ll need to use <code>removeListener</code>, the same way we do so handling DOM events.</p>\n<pre><code class=\"language-js\">backButtonHandler<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;hardwareBackPress&quot;</span><span class=\"token punctuation\">,</span> backButtonHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3>use Hooks to utilize BackHandler</h3>\n<p>Subscriptions are side effects! therefore, we can use <code>useEffect</code> built-in hook to execute them. It&#39;s important to notice that <code>useEffect</code> requires us to return a function to remove the subscription once React is willing to clean up! Cleanups are usual when the component is being unmounted or one of the dependencies of the <code>useEffect</code> hook change, so React needs to clean up previous subscriptions of that hook and re-execute it!</p>\n<p><a data-external=\"true\" rel=\"nofollow noreferrer noopener\" target=\"_blank\" href=\"undefined\">Read more about subscriptions and cleanups in <em>useEffect</em></a></p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">backButtonHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    BackHandler<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;hardwareBackPress&quot;</span><span class=\"token punctuation\">,</span> backButtonHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      BackHandler<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;hardwareBackPress&quot;</span><span class=\"token punctuation\">,</span> backButtonHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>backButtonHandler<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">View</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token operator\">...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">View</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3>useBackButton is born!</h3>\n<p>while the above code snippet works perfectly, copy-pasting it into all the screens might sound frustrating to some of us (we&#39;re freaks after all)! To help to remove our frustrations, React offers a way to build your custom hook.</p>\n<pre><code class=\"language-jsx\"><span class=\"token comment\">/* ComponentA */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">backButtonHandlerForA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ComponentA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Frustration begins!</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    BackHandler<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;hardwareBackPress&quot;</span><span class=\"token punctuation\">,</span> backButtonHandlerForA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      BackHandler<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">&quot;hardwareBackPress&quot;</span><span class=\"token punctuation\">,</span>\n        backButtonHandlerForA\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>backButtonHandlerForA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ViewA</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* ComponentB */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">backButtonHandlerForB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ComponentB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Frustration begins!</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    BackHandler<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;hardwareBackPress&quot;</span><span class=\"token punctuation\">,</span> backButtonHandlerForB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      BackHandler<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">&quot;hardwareBackPress&quot;</span><span class=\"token punctuation\">,</span>\n        backButtonHandlerForB\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>backButtonHandlerForB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ViewB</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>A custom hook is just an abstraction to share the same logic between components and hooks, the same way we do this between functions in a regular programming.\nComponents are functions. Hooks are functions as well. You get the idea, right?!</p>\n<p>In cases of <em>ComponentA</em> and <em>ComponentB</em> samples above, registration, removal and hook implementation are the same. it&#39;s just the handlers that can be different per component. So our custom hook needs to provide those common parts and only accept the changing part (handler per component) as an incoming argument.</p>\n<pre><code class=\"language-jsx\"><span class=\"token comment\">/* highlight-start */</span>\n<span class=\"token comment\">/* useBackButton */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">useBackButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">handler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Frustration isolated! Yay! 🎉</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    BackHandler<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;hardwareBackPress&quot;</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      BackHandler<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;hardwareBackPress&quot;</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>handler<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* highlight-end */</span>\n\n<span class=\"token comment\">/* ComponentA */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">backButtonHandlerForA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ComponentA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// utilize custom hook</span>\n  <span class=\"token function\">useBackButtton</span><span class=\"token punctuation\">(</span>backButtonHandlerForA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ViewA</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* ComponentB */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">backButtonHandlerForB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ComponentB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// utilize custom hook</span>\n  <span class=\"token function\">useBackButtton</span><span class=\"token punctuation\">(</span>backButtonHandlerForB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ViewB</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>Recap</h2>\n<p>If you intend to share a common logic between components and built-in hooks, you can abstract that away by building your custom hook. Make sure to read the impressively detailed docs of Hooks and <strong>Rules of Hooks</strong> from the official docs.</p>\n<p>Cheers!</p>\n</html>","prevSlug":"Unit-Testing-Higher-Order-Components-with-Enzyme-and-Jest"},{"title":"Unit Testing Higher Order Components with Enzyme and Jest","slug":"Unit-Testing-Higher-Order-Components-with-Enzyme-and-Jest","publishedAt":"03 Nov 2017","keywords":"React,Javascript,Jest,Enzyme,Unit-Test,Higher-order-componenets","excerpt":"Not all the components you write for your React application can be divided into Stateful and Stateless (dumb) categories. There is a 3rd advanced type of component in React called a higher-order component. A higher-order component is a function that takes a component as an argument and returns another component. Check out my other article to see how higher-order components are used in the real world.","html":"<!DOCTYPE html><html><p>Not all the components you write for your React application can be divided into Stateful and Stateless (dumb) categories. There is a 3rd advanced type of component in React called a higher-order component. A higher-order component is a function that takes a component as an argument and returns another component. Check out my other article to see how higher-order components are used in the real world.</p>\n<h2>Creating a HOC with Tests</h2>\n<p>We’ll be using Enzyme and Jest, but these concepts apply to any testing library.</p>\n<p>One of the common HOCs I write for every project of mine is called withConditional. Its purpose is to render a component if and only if the condition passes, otherwise just return null.</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;react&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withConditional</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">withConditionalComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> condition<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> withConditional<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>As you can see, when the condition passed to the HOC evaluates to true, it returns the component, otherwise it returns null.</p>\n<p>So how can you unit test the HOC? There are surprisingly minimal articles talking about unit testing these components, and I had a hard time figuring out the proper way. Recently the solution clicked!</p>\n<h2>Solution</h2>\n<p>To properly test these badass components, you just need to know that they are simple functions and that’s all!</p>\n<p><code>withConditional</code> is used in the following manner</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> ConditionalComponent <span class=\"token operator\">=</span> <span class=\"token function\">withConditional</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>ConditionalComponent condition<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>So, we should use the exact same concept to unit test them as well.</p>\n<p>The important thing to take into account here is to test the component for all states. For instance, if our HOC can handle two different states, depending on the condition passed to it, then we MUST account for both states in the tests.</p>\n<h2>When condition passes:</h2>\n<pre><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;should render the component only when the condition passes&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ConditionalComponent <span class=\"token operator\">=</span> <span class=\"token function\">withConditional</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>ConditionalComponent condition<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2>When condition fails:</h2>\n<pre><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;should return null when the condition fails&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ConditionalComponent <span class=\"token operator\">=</span> <span class=\"token function\">withConditional</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>ConditionalComponent condition<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Have fun and test it up!</p>\n</html>","nextSlug":"useBackButton-hook-to-handle-back-button-behavior-in-React-Native","prevSlug":"Detecting-unique-arrays-in-Javascript"},{"title":"3 Ways to clone objects in Javascript","slug":"3-Ways-to-clone-objects-in-Javascript","publishedAt":"01 Jan 2017","keywords":"Javascript,Objects,clone","excerpt":"The first way that could cross a developer’s mind is to deeply iterate through source object’s properties and copy them one by one on the target object. As it may seem good at the beginning, it is not a performance friendly solution and a potential bottleneck when it comes to large and deep objects.","html":"<!DOCTYPE html><html><p>Cloning an object is somewhat a task that is almost always used in any project from a simple one to the most complicated ones.\nAs it may seem simple for not seasoned Javascript developers, it actually has some pitfalls that would hurt you in the bones if you didn’t know the proper way to do it.</p>\n<h2>Talk is cheap, show me the code</h2>\n<p>The first way that could cross a developer’s mind is to deeply iterate through source object’s properties and copy them one by one on the target object. As it may seem good at the beginning, it is not a performance friendly solution and a potential bottleneck when it comes to large and deep objects.</p>\n<h3>1: Deep copy using iteration</h3>\n<pre><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">iterationCopy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> src<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token function\">iterationCopy</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {a:1, b:2, c:3}</span>\n<span class=\"token comment\">// Check if clones it and not changing it</span>\nsource<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">&quot;a&quot;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#39;a&#39;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n</code></pre>\n<p>So as you see, it’s working!</p>\n<p>Now let’s cut the chase to the second solution which is indeed more elegant but, more limited to use.</p>\n<h3>2: Converting to JSON and back</h3>\n<pre><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">jsonCopy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token function\">jsonCopy</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {a:1, b:2, c:3}</span>\n<span class=\"token comment\">// Check if clones it and not changing it</span>\nsource<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">&quot;a&quot;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#39;a&#39;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n</code></pre>\n<p>Note: Be careful about using this method as your source object MUST be JSON safe. So it may need some sort of exception handling to keep it safe in cases in which the source object is not convertible to JSON.</p>\n<h3>3: Using Object.assign</h3>\n<blockquote>\n<p>Update: This method has a flaw that it only does a shallow copy. It means that nested properties are still going to be copied by reference. Be careful about it.</p>\n</blockquote>\n<p>This way is the best and the safest way I personally consume in my projects.It’s leveraging a built-in static method on the Object object and is handled and provided by the language. So use this one!</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">bestCopyEver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token function\">bestCopyEver</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {a:1, b:2, c:3}</span>\n<span class=\"token comment\">// Check if clones it and not changing it</span>\nsource<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">&quot;a&quot;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#39;a&#39;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n</code></pre>\n<h2>Conclusion</h2>\n<p>You must know that every framework and including libraries such as Lodash and Underscore has a way to support cloning objects. Almost all of them used a more complex version of iterationCopy before ES6 was introduced. On ES6+ environments, there is language support for Object.assign , so try to use the most out of it. As a rule of thumb, always try to use the 3rd solution and avoid the JSON solution.</p>\n<p>Keep calm and clone objects without any hesitation :)</p>\n</html>","nextSlug":"Cross-Domain-Iframe-parent-communication"},{"title":"Cross-Domain Iframe-parent communication","slug":"Cross-Domain-Iframe-parent-communication","publishedAt":"28 Dec 2016","keywords":"Javascript,HTML,iframe,messaging","excerpt":"There are many cases iframe would be good solution to use. Although they are kind of dead to HTML and not a lot of developers use it, It could come up to you as a solution to a complicated problem some day.","html":"<!DOCTYPE html><html><p>There are many cases iframe would be good solution to use. Although they are kind of dead to HTML and not a lot of developers use it, It could come up to you as a solution to a complicated problem some day.</p>\n<p>Knowing a way to communicate through iframe to parent is such a valuable and time saver. Maybe iframe could tell it’s parents when it’s content is ready or engage user interactions inside iframe with the parent to react properly.</p>\n<p>Some days ago at my company we had a Wordpress website that loaded an iframe for choosing a plan to buy virtual machines as shown below.</p>\n<p><img alt=\"An iframe included inside Wordpress to choose VM plans\" src=\"https://cdn-images-1.medium.com/max/1600/1*Npna_TbF8ChgAroSVkyu_Q.png\" loading=\"lazy\"></p>\n<p>I was assigned a task to do something challenging on this element. The company intended to open a URL on click of the orange button, BUT because the button was inside the iframe, that couldn’t be managed easily.</p>\n<p>First thing I tried to was to use postMessage to send a message from iframe to it’s parent. I came up with this code:</p>\n<pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>Path/To/Html<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>my-btn<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span>Start<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<pre><code class=\"language-js\">document\n  <span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;my-btn&quot;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;click&quot;</span><span class=\"token punctuation\">,</span> handleButtonClick<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleButtonClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;iframe_message&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>And also listen to the message on the parent window:</p>\n<pre><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#39;iframe_message&#39;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#39;some url&#39;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&#39;\\_blank&#39;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n</code></pre>\n<p>It was perfect! worked like a charm. It passed some minutes until I figured out the actual problem. <strong>This only worked for same-domain iframes</strong>. Apparently <strong>cross-domain iframes don’t post message to the parent properly</strong>.</p>\n<p>I dogged the web a lot and found a really interesting inspiration on a dark edge of <a data-external=\"true\" rel=\"nofollow noreferrer noopener\" target=\"_blank\" href=\"undefined\">stackoverflow</a> . Although It did not help me, It fixed me on the right direction. The solution was to use customEvents.</p>\n<p>So I refactored the solution to:</p>\n<pre><code class=\"language-js\">document\n  <span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;my-btn&quot;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;click&quot;</span><span class=\"token punctuation\">,</span> handleButtonClick<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myEvent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;my_event&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> detail<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> url<span class=\"token operator\">:</span> <span class=\"token string\">&quot;some url&quot;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleButtonClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>myEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>And listen to it on the parent of course:</p>\n<pre><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">&quot;iframe_message&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>detail<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;_blank&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>It was amazing as I could easily pass custom data from iframe to the parent window.</p>\n<h2>Conclusion:</h2>\n<p>Dealing with iframes is Hard. It’s not intended to be used unless there is no other way to do it.</p>\n<p>If you’re using a same-domain iframe, you’re in heaven. You could easily control iframe’s content and also communicate to it’s parent through postMessage.</p>\n<p>But you’re in Hell when it gets cross-domain. You could only use CustomEvent and dispatchEvent on the iframe and listen to it on the parent window. In this case try to modularize your communication protocol and pass custom data.</p>\n</html>","nextSlug":"Detecting-unique-arrays-in-Javascript","prevSlug":"3-Ways-to-clone-objects-in-Javascript"}];
        export default posts;
    